--> SANYAM 21CSU234 FS-IV-A

--> Spring Inversion of Control : 
• Inversion of Control (IoC) is a concept inspired by loose coupling whereby objects define their 
dependencies through constructor arguments, setter methods, or through properties that are defined on the object instance.
• In simple language, It’s an approach of outsourcing the construction and management of objects

--> IoC Advantages :
• Decoupling the execution of a task from its implementation.
• Making it easier to switch between different implementations.
• Greater modularity of a program.
• Greater ease in testing a program by isolating a component or mocking its dependencies and allowing components to communicate through contracts.
• The basic concept of IOC is that you didn’t need to worry about creating objects, you only describes how they should be created.

-- Spring Container has two primary functions:
• Create and Manage Objects (Inversion of Control)
• Inject Object Dependencies (Dependency Injection) 

--> Spring Beans : 
• A "Spring Bean" is simply a Java object.
• When Java objects are created by the Spring Container, then Spring refers to them as "Spring Beans".
• Spring Beans are created from normal Java classes .... just like Java objects.
• Beans are instantiated, assembled, and managed by the Spring IoC container

● There are three ways to provide metadata to the Spring, which are as shown below :
1) XML-based configuration
2) Annotations
3) Java-based configuration

1) XML-based configuration: You provide an XML file in which all the dependency classes are listed.
2) Annotation-based configuration: Annotations are a way to provide metadata about your code. Annotations are similar to comments, which are not for other  
developers but for the tools that process your source code. Here, that tool is the Spring Framework.
3) Java-based configuration: You provide a type of factory class that contains the methods that return the objects of the dependency classes. The Spring Container  
executes these methods to instantiate the dependency classes. This factory class needs to be marked with the @Configuration annotation.

--> Spring XML Based Configuration : 
• Spring XML based configuration was introduced in Spring 2.0 and was widely popular in the earlier days of development
• Spring provides a boilerplate XML template that developers can use for bean creation and management via custom tags
• These custom tags works best for application specific beans (dependency objects, AOP, transactions etc.) and for infrastructure and integration (integration with 3rd party frameworks)

• XML Configuration - Steps
1) Configure Spring Beans – XML file 
• Inside the <beans> tag, you can plug different custom tags for bean creation and management.
• <bean id="Addition" class="com.ncu.Calculator.AdditionService"></bean> 

2) Create a Spring Container – Application Context
• Spring container is generally implemented as “Application Context” 
• There are specialized implementations of ApplicationContext
i) ClassPathXmlApplicationContext :
ex : ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext("operations.xml");
ii) AnnotationConfigApplicationContext
iii) GenericWebApplicationContext

3) Retrieve Beans from Spring Container 
ex : CalculatorClass calc = context.getBean("oper",CalculatorClass.class);